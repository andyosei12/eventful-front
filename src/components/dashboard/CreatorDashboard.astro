---
export const prerender = false;
import Stats from '../Stats.astro';
import Chart from '../Chart';
import FetchError from '../FetchError';

const token = Astro.cookies.get('token')?.value;

let errors = ""

const totalEvents = await fetch(
  `${import.meta.env.PUBLIC_API_URL}/analytics/events/total`,
  {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  }
).then((res) => res.json()).catch(err => errors = err.message);

const totalEventees = await fetch(
  `${import.meta.env.PUBLIC_API_URL}/analytics/tickets_sold`,
  {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  }
).then((res) => res.json()).catch(err => errors = err.message)

const totalAttendees = await fetch(
  `${import.meta.env.PUBLIC_API_URL}/analytics/tickets/completed`,
  {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  }
).then((res) => res.json()).catch(err => errors = err.message)

const revenue = await fetch(
  `${import.meta.env.PUBLIC_API_URL}/analytics/revenue`,
  {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  }
).then((res) => res.json()).catch(err => errors = err.message)

const events: { title: string; _id: string }[] = await fetch(
  `${import.meta.env.PUBLIC_API_URL}/events/auth/creator`,
  {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  }
).then((res) => res.json()).catch(err => errors = err.message)
---

{errors && <FetchError client:load title="analytics"/>}
{!errors && <dh-component>
  <div class="container pt-6">
    <div class="flex flex-wrap">
      <div class="w-full">
        <div class="rounded">
          <Stats
            events={totalEvents}
            eventees={totalEventees}
            attendees={totalAttendees}
            revenue={revenue[0]?.total || 0}
          />
        </div>
      </div>
    </div>
  </div>
  <div class="container pt-12">
    <div class="flex flex-wrap">
      {
        totalEventees !== 0 && (
          <div class="md:w-2/3 w-full pb-6 md:pb-0 md:pr-6">
            <div class="rounded h-80">
              <Chart
                eventees={totalEventees}
                attendees={totalAttendees}
                client:only
              />
            </div>
          </div>
        )
      }

      <div class="md:w-1/3 w-full">
        <!-- Remove class [ h-24 ] when adding a card block -->
        <!-- Remove class [ border-gray-300  dark:border-gray-700 border-dashed border-2 ] to remove dotted border -->
        <div class="rounded">
          <!-- provide heading class with tailwind -->
          <h3 class="text-2xl font-bold mb-2">View Event Specific stats</h3>
          {
            events.map((event) => (
              <div class="flex justify-between items-center py-2">
                <a
                  href={`/dashboard/events/${event._id}/stats`}
                  class="inline-flex items-center justify-center p-5 text-base font-medium text-gray-500 rounded-lg bg-gray-50 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white"
                >
                  <span class="w-full">{event.title}</span>
                  <svg
                    class="w-4 h-4 ms-2 rtl:rotate-180"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 14 10"
                  >
                    <path
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M1 5h12m0 0L9 1m4 4L9 9"
                    />
                  </svg>
                </a>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</dh-component>}

